@using System.ComponentModel.DataAnnotations
@using System.Threading
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment env
@implements IDisposable
@using System.IO
<h3>UploadSong</h3>

<EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
    <div class="form-group">
        Song: <InputFile OnChange="OnChange" class="form-group" />
        @{
            var progressCss = "progress" + (displayProgress ? "" : "d-none");
            var progressWidthStyle = progressPercent + "%";
        }
        <div class="@progressCss">
            <div class="progress-bar" role="progressbar" style="width:@progressWidthStyle"
                 area-valuenow="@progressPercent" aria-minvalue="0" aria-maxvalue="100"></div>
        </div>
        <p class="text-danger" style="display : @(bMaxFileSizeAlert ? "normal" : "none")">File lớn hơn @maxFileSizeMB MB</p>
        <button class="btn btn-primary">Tải lên</button>
    </div>
</EditForm>


@*show list image before upload*@
@*@if (imageUrls.Count > 0)
    {
        <h3>Images</h3>
        <div class="card" style="width:35rem;">
            @foreach (var item in imageUrls)
            {
                <div class="col-4"><img class="rounded" m-1 src="@item"/></div>
            }
        </div>
    }*@

@code {
    private EditContext editContext;
    private FileUpload fileUpload;
    //for progress bar
    private bool displayProgress;
    private int progressPercent;
    private CancellationTokenSource cancellation;

    const long maxFileSizeMB = 200; //200 MB
    const long maxFileSize = 1024 * 1024 * maxFileSizeMB; //200 MB
    private bool bMaxFileSizeAlert = false;

    protected override void OnInitialized()
    {
        cancellation = new CancellationTokenSource();
        fileUpload = new FileUpload();
        editContext = new EditContext(fileUpload);
    }

    private void OnChange(InputFileChangeEventArgs e)
    {
        bMaxFileSizeAlert = false;
        fileUpload.Song = e.File;
        if (fileUpload.Song.Size > maxFileSize) bMaxFileSizeAlert = true;
        editContext.NotifyFieldChanged(FieldIdentifier.Create(() => fileUpload.Song));
    }

    private async Task OnSubmit()
    {
        //fileUpload.Song.Size
        using var stream = fileUpload.Song.OpenReadStream(maxFileSize);
        var path = $"{env.ContentRootPath}\\Upload\\{fileUpload.Song.Name}";
        using var file = File.OpenWrite(path);
        var buffer = new byte[1 * 1024 * 1024];
        int bytesRead = 0;
        double totalRead = 0;
        displayProgress = true;

        while ((bytesRead = await stream.ReadAsync(buffer, cancellation.Token)) != 0)
        {
            totalRead += bytesRead;
            await file.WriteAsync(buffer, cancellation.Token);

            progressPercent = (int)((totalRead / fileUpload.Song.Size) * 100);
            StateHasChanged();
        }

        displayProgress = false;
    }

    public void Dispose()
    {
        cancellation.Cancel();
    }

    public class FileUpload
    {
        [Required]
        public IBrowserFile Song { get; set; }
    }
}
