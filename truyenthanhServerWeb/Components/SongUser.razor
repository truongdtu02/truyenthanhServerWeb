@inject IWebHostEnvironment env
@inject SongService _songService
@implements IDisposable
@*control song*@
<div class="row">
    <div class="column">
        <button @onclick="Play" class="btn btn-info" style="color:limegreen">Play</button>
        <button @onclick="Pause" class="btn btn-info" style="color:orange">Pause</button>
        <button @onclick="Stop" class="btn btn-info" style="color:red">Stop</button>
    </div>
    <div class="column"></div>
</div>
<h5 class="text-info">@selectedSong</h5>

<br />

<EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
    <div class="form-group">
        <InputFile OnChange="OnChange" class="form-group" />
        @{
            var progressCss = "progress" + (displayProgress ? "" : "d-none");
            var progressWidthStyle = progressPercent + "%";
        }
        <div class="@progressCss">
            <div class="progress-bar" role="progressbar" style="width:@progressWidthStyle"
                 area-valuenow="@progressPercent" aria-minvalue="0" aria-maxvalue="100"></div>
        </div>
        <p class="text-danger" style="display : @(bMaxFileSizeAlert ? "normal" : "none")">File lớn hơn @maxFileSizeMB MB</p>
        <button style="display:@(bIsUploading?"none":"normal")" class="btn btn-primary">Tải lên</button>
    </div>
</EditForm>

<h4>Danh sách file âm thanh</h4>

<table class="table table-hover" width="100%">
    <tbody>
        @foreach (var item in _lSong)
        {
            <tr>
                <td><a @onclick="@(e => SelectSong(item))" stryle="word-break:break-all">@item</a></td>
                <td>
                    <a @onclick="@(e => OrderUp(item))" class="btn btn-sm btn-outline-info">Lên</a>
                    <a @onclick="@(e => OrderDown(item))" class="btn btn-sm btn-outline-warning">Xuống</a>
                    <a @onclick="@(e => Delete(item))" class="btn btn-sm btn-outline-danger">Xoá</a>
                </td>
            </tr>
        }
        @*<tr><td colspan="5"><strong>Tổng số: @Model.Count()</strong></td></tr>*@

    </tbody>
</table>

@code {
    private EditContext editContext;
    private FileUpload fileUpload;
    //for progress bar
    private bool displayProgress;
    private int progressPercent;
    private CancellationTokenSource cancellation;

    const long maxFileSizeMB = 200; //200 MB
    const long maxFileSize = 1024 * 1024 * maxFileSizeMB; //200 MB
    private bool bMaxFileSizeAlert = false;

    private static string[] TypeFileSupport = new string[] { ".aac", ".mp3", ".m4a", ".wav", ".ogg", ".flac", ".wma" }; //aac, mp3, m4a, wav, ogg, flac, wma

    private List<string> _lSong;
    private string pathUserSong;
    private string selectedSong;

    private bool bIsUploading = false;

    protected override void OnInitialized()
    {
        cancellation = new CancellationTokenSource();
        fileUpload = new FileUpload();
        editContext = new EditContext(fileUpload);
        _lSong = _songService.Get();
        pathUserSong = _songService.GetRootPath();

        int tmpUserIndx = _songService.UserIndx;
        if (tmpUserIndx != -1)
        {
            UDPServer._userList[tmpUserIndx].SongChanged += UpdateListSong;
        }
    }

    // The event handler, will update list song
    private async void UpdateListSong(object sender, SongChangedEventArgs args)
    {
        _lSong = _songService.Get();
        //Console.WriteLine("new update");
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public void SelectSong(string _song)
    {
        selectedSong = _song;
    }

    //song control
    private void Play()
    {
        _songService.Play(selectedSong);
    }
    private void Pause()
    {

    }
    private void Stop()
    {
        _songService.Stop();

    }

    //change order
    private void OrderUp(string item)
    {
        _songService.ChangeOrderUp(item);
    }
    private void OrderDown(string item)
    {
        _songService.ChangeOrderDown(item);
    }
    //delete
    private void Delete(string item)
    {
        _songService.Delete(item);
    }

    private void OnChange(InputFileChangeEventArgs e)
    {
        bMaxFileSizeAlert = false;
        fileUpload.Song = e.File;
        if (fileUpload.Song.Size > maxFileSize) bMaxFileSizeAlert = true;
        editContext.NotifyFieldChanged(FieldIdentifier.Create(() => fileUpload.Song));
    }

    private async Task OnSubmit()
    {
        //check input is null ?

        //check duplicate name song
        if ((fileUpload.Song == null) || (_lSong != null && _lSong.Contains(fileUpload.Song.Name))) return;

        //check type of file
        string tmpExt = Path.GetExtension(fileUpload.Song.Name);
        if (!TypeFileSupport.Contains(tmpExt)) return;

        //check pathSong is correct
        if (pathUserSong == null) return;

        bIsUploading = true;

        //fileUpload.Song.Size
        using var stream = fileUpload.Song.OpenReadStream(maxFileSize);
        string path = Path.Combine(env.ContentRootPath, pathUserSong, fileUpload.Song.Name);
        using var file = File.OpenWrite(path);
        var buffer = new byte[5 * 1024 * 1024];
        int bytesRead = 0;
        double totalRead = 0;
        displayProgress = true;

        while ((bytesRead = await stream.ReadAsync(buffer, cancellation.Token)) != 0)
        {
            totalRead += bytesRead;
            await file.WriteAsync(buffer, cancellation.Token);

            progressPercent = (int)((totalRead / fileUpload.Song.Size) * 100);
            StateHasChanged();
        }

        displayProgress = false;

        //add song to list
        //_songService.Add(fileUpload.Song.Name);

        bIsUploading = false;
    }

    public void Dispose()
    {
        cancellation.Cancel();
    }

    public class FileUpload
    {
        [Required]
        public IBrowserFile Song { get; set; }
    }
}
