@inject DeviceService deviceService
@inject AccountService accountService

@code{

    //interval auto reload component in ms
    const int IntervalReload = 5000; // ~ 30s

    [Parameter]
    public string userName { get; set; }

    private User user;
    private List<Device> deviceList;
    private int userIndx = -1;

    private bool bDuplicateId = false; //show error duplicate username
    private bool bOnInitialized = false;

    private static System.Timers.Timer aTimer;

    private void StartTimerRefresh()
    {
        aTimer = new System.Timers.Timer(IntervalReload);
        aTimer.Elapsed += HandlerTimerRefresh;
        aTimer.Enabled = true;
    }

    private async void HandlerTimerRefresh(Object source, System.Timers.ElapsedEventArgs e)
    {
        deviceList = deviceService.GetByIndx(userIndx);
        //Console.Write(".");
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        user = accountService.GetUserByUsername(userName);
        if (user != null)
        {
            deviceList = user.lDevice;
            userIndx = user.indx;
        }

        StartTimerRefresh();

        // Subscription to database record change events
        //DeviceService.DeviceChanged += UpdateNewDevices;

        //Console.WriteLine("DeviceUser.razor");
    }

    // The event handler, will update the HTML view according to new stock value
    private async void UpdateNewDevices(object sender, DeviceChangedEventArgs args)
    {
        //_deviceList = _deviceSerive.GetByIndx(userIndx);
        //Console.WriteLine("new update");
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        var timer = new Timer(new TimerCallback(async _ =>
    //        {
    //            user = accountService.GetUserByUsername(userName);
    //            if (user != null)
    //                deviceList = user.lDevice;
    //            //await InvokeAsync(() =>
    //            //{
    //            //    base.StateHasChanged();
    //            //});
    //            Console.Write(".");
    //        }), null, IntervalReload, IntervalReload);

    //        Console.WriteLine("User page 1st after render");
    //    }
    //}

    private void OnOffDevice(string _dvId)
    {
        int indxTmp = deviceList.FindLastIndex(dv => dv.Id == _dvId);
        if (indxTmp != -1)
        {
            bool bTmp = deviceList[indxTmp].deviceEndpoint.On;
            if (deviceService.OnOffDevice(userIndx, _dvId, !bTmp))
            {
                deviceList[indxTmp].deviceEndpoint.On = !bTmp;
            }
        }
    }

}

<style>
    .dotOn {
        height: 25px;
        width: 25px;
        background-color: green;
        border-radius: 50%;
        display: inline-block;
    }

    .dotOff {
        height: 25px;
        width: 25px;
        background-color: gray;
        border-radius: 50%;
        display: inline-block;
    }

    pO {
        color: green
    }

    pF {
        color: gray
    }
</style>

<h4>Danh sách thiết bị</h4>

<table class="table table-hover table-sm">
    <thead>
        <tr>
            <th>
                <pO>Bật</pO> / <pF>Tắt</pF>
            </th>
            <th>
                Tên thiết bị
            </th>
            <th>
                Trạng thái
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (deviceList != null)
        {
            foreach (var i in deviceList)
            {
                <tr>
                    <td><span class="@(i.deviceEndpoint.On ? "dotOn" : "dotOff")" @onclick="@(e => OnOffDevice(i.Id))"></span></td>
                    <td>@i.Name</td>
                    <td><span class="@(i.deviceEndpoint.TimeOut ? "dotOff" : "dotOn")"></span></td>
                </tr>
            }
        }
    </tbody>
</table>

@*<button hidden="true" @onclick="@(e => Save(_data[0]))" class="btn btn-outline-danger">Remove selected</button>
    <button @onclick="ClearAll" class="btn btn-outline-danger">Remove all</button>
    <button @onclick="Save" class="btn btn-outline-primary">Save</button>*@

@*<span style="height: 25px; width: 25px; background-color: green;
    border-radius: 50%; display: inline-block;"></span>*@