@*https://youtu.be/FGZHQxTon_s*@

@using System.ComponentModel.DataAnnotations
@using System.Threading
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment env
@implements IDisposable
@using System.IO
<h3>UploadSong</h3>

<EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
    <div class="form-group">
        Song: <InputFile multiple OnChange="OnChange" class="form-group" />
        @{
            var progressCss = "progress" + (displayProgress ? "" : "d-none");
            var progressWidthStyle = progressPercent + "%";
        }
        <div class="@progressCss">
            <div class="progress-bar" role="progressbar" style="width:@progressWidthStyle"
                 area-valuenow="@progressPercent" aria-minvalue="0" aria-maxvalue="100"></div>
        </div>
        <button class="btn btn-primary">Tải lên</button>
    </div>
</EditForm>

@if (imageUrls.Count > 0)
{
    <h3>Images</h3>
    <div class="card" style="width:35rem;">
        @foreach (var item in imageUrls)
        {
            <div class="col-4"><img class="rounded" m-1 src="@item" /></div>
        }
    </div>
}

@code {
    private EditContext editContext;
    private FileUpload fileUpload;
    //for progress bar
    private bool displayProgress;
    private int progressPercent;
    private CancellationTokenSource cancellation;

    private IList<string> imageUrls = new List<string>();
    private int Total;

    protected override void OnInitialized()
    {
        cancellation = new CancellationTokenSource();
        fileUpload = new FileUpload();
        editContext = new EditContext(fileUpload);
    }

    private async Task OnChange(InputFileChangeEventArgs e)
    {
        int maxFileCount = 15; //max 15 files once
        fileUpload.Picture = e.GetMultipleFiles(maxFileCount).ToArray();
        var format = "image/png";
        Total = e.GetMultipleFiles(maxFileCount).Count();
        foreach (var item in e.GetMultipleFiles(maxFileCount))
        {
            var resizedImageFile = await item.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imageUrl);
        }
        editContext.NotifyFieldChanged(FieldIdentifier.Create(() => fileUpload.Picture));
    }

    private async Task OnSubmit()
    {
        const long maxFileSiz = 5 * 1024 * 1024; // ~ 5 MB
        for (int i = 0; i < Total; i++)
        {
            var path = $"{env.WebRootPath}\\Upload\\{fileUpload.Picture[i].Name}";
            using var file = File.OpenWrite(path);
            using var stream = fileUpload.Picture[i].OpenReadStream(maxFileSiz);
            var buffer = new byte[4 * 1096];
            int bytesRead = 0;
            double totalRead = 0;
            displayProgress = true;

            while ((bytesRead = await stream.ReadAsync(buffer, cancellation.Token)) != 0)
            {
                totalRead += bytesRead;
                await file.WriteAsync(buffer, cancellation.Token);

                progressPercent = (int)((totalRead / fileUpload.Picture[i].Size) * 100);
                StateHasChanged();
            }

            displayProgress = false;
        }
    }

    public void Dispose()
    {
        cancellation.Cancel();
    }

    public class FileUpload
    {
        [Required]
        public IBrowserFile[] Picture { get; set; }
    }
}
